{"version":3,"sources":["App.js","App2.js","serviceWorker.js","index.js"],"names":["App","useState","title","setTitle","cover","setCover","type","name","value","onChange","event","target","id","files","onClick","uploadData","FormData","append","axios","post","then","res","console","log","newItem","App2","state","things","get","setState","data","thing","this","map","item","index","key","alt","src","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gSAoCeA,MAhCf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGaF,qBAHb,mBAGNG,EAHM,KAGCC,EAHD,KAkBX,OACA,6BACE,6BAEA,2BAAOC,KAAK,OAAOC,KAAK,QAAQC,MAAON,EAAOO,SAAU,SAACC,GAAD,OAAWP,EAASO,EAAMC,OAAOH,UACzF,6BACA,2BAAOF,KAAK,OAAOM,GAAG,QAAQL,KAAK,QAAQE,SAAU,SAAAC,GAAK,OAAIL,EAASK,EAAMC,OAAOE,MAAM,OAC1F,4BAAQC,QAAS,kBAjBL,WACd,IAAMC,EAAa,IAAIC,SACvBD,EAAWE,OAAO,QAASf,GAC3Ba,EAAWE,OAAO,QAASb,EAAOA,EAAMG,MACxCW,IAAMC,KAAK,IAAKJ,GACfK,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAYAG,KAAvB,cC1BeC,E,4MAEjBC,MAAQ,CACJC,OAAQ,I,kEAIS,IAAD,OACpBT,IAAMU,IAAI,8BACPR,MAAK,SAAAC,GACJ,OAAO,EAAKQ,SAAS,CACnBF,OAAQN,EAAIS,Y,+BAQd,IAAMC,EAAQC,KAAKN,MAAMC,OAAOM,KAAI,SAACC,EAAKC,GACtC,OACE,6BACE,wBAAIC,IAAKD,GAAQD,EAAKhC,OACtB,yBAAKkC,IAAKD,EAAOE,IAAI,IAAIC,IAAKJ,EAAKK,YAI3C,OACI,6BACKR,EACD,kBAAC,EAAD,W,GA9BkBS,aCSdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.460cbcd3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport axios from 'axios'\n\nfunction App() {\n\n  const [title, setTitle] = useState('')\n  const [cover, setCover] = useState()\n\n\n\n\n  const newItem = () => {\n    const uploadData = new FormData()\n    uploadData.append('title', title)\n    uploadData.append('image', cover, cover.name)\n    axios.post('/', uploadData)\n    .then(res => console.log(res))\n  }\n\n\n\n    return (\n    <div>\n      <br></br>\n    \n      <input type='text' name='title' value={title} onChange={(event) => setTitle(event.target.value)}></input>\n      <br></br>\n      <input type='file' id='image' name='image' onChange={event => setCover(event.target.files[0])}></input>\n      <button onClick={() => newItem()}>click me</button>\n      \n    </div>\n    );\n  }\n  \n\nexport default App;\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport App from './App'\r\nexport default class App2 extends Component {\r\n\r\n    state = {\r\n        things: []\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n    axios.get('http://localhost:8000/api/')\r\n      .then(res => {\r\n        return this.setState({\r\n          things: res.data\r\n        })\r\n      })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const thing = this.state.things.map((item,index) => {\r\n            return(\r\n              <div>\r\n                <h1 key={index}>{item.title}</h1>\r\n                <img key={index} alt='w' src={item.image}></img>\r\n              </div>\r\n            )\r\n          }) \r\n        return (\r\n            <div>\r\n                {thing}\r\n                <App />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App2 from './App2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}